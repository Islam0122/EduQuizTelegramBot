import random

from aiogram import F, types, Router, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from database.orm_query import *
from filter.chat_types import ChatTypeFilter
from handlers.quiz_function import get_topics
from keyboard.inline import *
from sqlalchemy.future import select
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

start_functions_private_router = Router()
start_functions_private_router.message.filter(ChatTypeFilter(['private']))

welcome_text = (
    "üëã –ü—Ä–∏–≤–µ—Ç !\n\n"
    "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EduQuiz ‚Äî –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏!\n\n"
    "üìö –ó–Ω–∞–Ω–∏—è ‚Äî —ç—Ç–æ —Å–∏–ª–∞, –∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º! –° EduQuiz –≤—ã —Å–º–æ–∂–µ—Ç–µ\n"
    "üîπ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n"
    "üîπ –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n"
    "üîπ –£—á–∏—Ç—å—Å—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –≤ –∏–≥—Ä–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
    "üöÄ –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!"
)
photo=types.FSInputFile('media/img.png')

@start_functions_private_router.message(CommandStart())
async def start_cmd(message: types.Message,session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    users = await orm_get_id_bot_user(session)
    if user_id not in users:
        name = f"{message.from_user.first_name}"
        username = f"@{message.from_user.username}" if message.from_user.username else ''
        await orm_add_bot_users(session, user_id=user_id, name=name, username=username)

    await message.answer_photo(
        photo=types.FSInputFile('media/img.png'),
        caption=welcome_text,
        reply_markup= start_functions_keyboard()
    )


@start_functions_private_router.callback_query(F.data == "start")
async def start_main_menu(query: types.CallbackQuery, ):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await query.message.edit_caption(
        caption=welcome_text,
        reply_markup=start_functions_keyboard())


@start_functions_private_router.callback_query(F.data == "start_")
async def start_main_menu(query: types.CallbackQuery, ):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await query.message.delete()
    await query.message.answer_photo(
        photo=types.FSInputFile('media/img.png'),
        caption=welcome_text,
        reply_markup=start_functions_keyboard()
    )


@start_functions_private_router.callback_query(F.data == "about_eduquiz")
async def about_eduquiz (query: types.CallbackQuery, ):
    about_eduquiz_text = (
        "üè¢ *–û –ø—Ä–æ–µ–∫—Ç–µ EduQuiz*\n\n"
        "EduQuiz ‚Äî —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π. üåêüìö\n\n"

        "ü§ñ **–í EduQuiz –ë–æ—Ç–µ**\n"
        "–í –Ω–∞—à–µ–º Telegram-–±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚úÖ –ü—Ä–æ–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã\n"
        "‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è\n"
        "‚úÖ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏\n\n"

        "üåê **–ù–∞ –°–∞–π—Ç–µ EduQuiz**\n"
        "–ù–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è:\n"
        "üñ•Ô∏è *–¢–∞–π–ø–∏–Ω–≥ —Ç–µ—Å—Ç—ã*: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏.\n"
        "üíª *–¢–µ—Å—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é*: —Ç–µ—Å—Ç—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º.\n"
        "üë©‚Äçüè´ *–í–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π*: –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω –∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
        "üé• *–ü–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ*: –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.\n\n"
        "–ó–∞–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!"
    )
    await query.message.edit_caption(
        caption=about_eduquiz_text,
        reply_markup=return_menu_functions_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


@start_functions_private_router.callback_query(F.data == "contact_us")
async def contact_us (query: types.CallbackQuery, ):
    contact_info = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n"
        "‚úâÔ∏è Email: duishobaevislam01@gmail.com\n"
        "üì± Telegram: @duishobaevislam01"
    )
    await query.message.edit_caption(
        caption=contact_info,
        reply_markup=return_menu_functions_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


@start_functions_private_router.callback_query(F.data == 'faq')
async def faq_callback_query(query: types.CallbackQuery) -> None:
    caption_text = (
        "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    )
    await query.message.edit_caption(
        caption=caption_text,
        reply_markup=generate_faq_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


@start_functions_private_router.callback_query(F.data.startswith('faq_'))
async def faq_answer_callback(query: types.CallbackQuery) -> None:
    index = int(query.data.split('_')[1])
    question = FAQ[index]["question"]
    answer = FAQ[index]["answer"]

    caption_text = f"<b>{question}</b>\n\n{answer}"
    await query.message.edit_caption(
        caption=caption_text,
        reply_markup=return_menu_functions_keyboard(),
        parse_mode=ParseMode.HTML
    )


async def get_videos():
    url = "https://eduquiz-back-end.onrender.com/api/v1/videos/"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                return []


@start_functions_private_router.callback_query(F.data == 'useful_videos')
async def useful_videos_callback_query(query: types.CallbackQuery) -> None:
    videos = await get_videos()
    if videos:
        keyboard = generate_video_keyboard(videos)
        await query.message.edit_caption(
            caption="üé• –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=keyboard,
        )
    else:
        await query.message.edit_caption(
            caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, üé• –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."
        )


@start_functions_private_router.callback_query(F.data == 'my_stats')
async def my_stats_callback(query: types.CallbackQuery, session: Session) -> None:
    user_id = query.from_user.id

    async with session.begin():
        result = await session.execute(
            select(
                QuizResult.score,
                QuizResult.total_questions,
                QuizResult.created_at,
                func.sum(QuizResult.score).filter(QuizResult.user_id == user_id).label("total_score"),
                func.count(QuizResult.id).filter(QuizResult.user_id == user_id).label("total_tests"),
                func.max(QuizResult.score).filter(QuizResult.user_id == user_id).label("best_score"),
                func.max(QuizResult.total_questions).filter(QuizResult.user_id == user_id).label("best_total_questions")
            ).where(QuizResult.user_id == user_id)
            .order_by(QuizResult.created_at.desc())
            .limit(1)
        )
        row = result.first()

    if row and all(row):
        score, total_questions, created_at, total_score, total_tests, best_score, best_total_questions = row

        caption_text = (
            "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–µ—Å—Ç–µ: {score}/{total_questions}\n"
            f"üî¢ –í–∞—à –æ–±—â–∏–π –±–∞–ª–ª –∑–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã: {total_score or 0} üî•\n"
            f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {round(total_score / total_tests, 2) if total_tests else 0}\n"
            f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score}/{best_total_questions}\n"
            f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω: {created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        )

        await query.message.edit_caption(
            caption=caption_text,
            reply_markup=return_menu_functions_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        await query.message.edit_caption(
            caption="üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.",
            reply_markup=return_menu_functions_keyboard(),
        )


class QuizState(StatesGroup):
    current_question = State()
    correct_answers = State()

@start_functions_private_router.callback_query(F.data.startswith("start_quiz"))
async def start_quiz_callback(query: types.CallbackQuery) -> None:
    topics = await get_topics()
    keyboard = InlineKeyboardBuilder()
    for topic in topics:
        keyboard.add(InlineKeyboardButton(text=topic["name"], callback_data=f"select_topic_{topic['id']}"))
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")
    await query.message.edit_caption(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard.adjust(1).as_markup())


@start_functions_private_router.callback_query(F.data.startswith("select_topic_"))
async def select_topic(update: types.CallbackQuery, state: FSMContext) -> None:
    topic_id = int(update.data.split("_")[2])
    topics = await get_topics()
    topic = next(topic for topic in topics if topic['id'] == topic_id)
    random_questions = random.sample(topic["questions"], 5)
    await state.set_data({"questions": random_questions, "current_question": 0, "correct_answers": 0})

    question = random_questions[0]
    options = [
        question["option_a"],
        question["option_b"],
        question["option_c"],
        question["option_d"]
    ]

    keyboard = InlineKeyboardBuilder()
    for option in options:
        keyboard.add(InlineKeyboardButton(text=option, callback_data=f"answer_{question['id']}_{option}"))
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")

    if "image" in question and question["image"]:
        await update.message.delete()
        await update.message.answer_photo(
            photo=question["image"],
            caption=question["text"],
            reply_markup=keyboard.adjust(1).as_markup()
        )
    else:
        await update.message.delete()
        await update.message.answer_photo(
            photo=photo,
            caption=question["text"],
            reply_markup=keyboard.adjust(1).as_markup()
        )


@start_functions_private_router.callback_query(F.data.startswith("answer_"))
async def answer_question(update: types.CallbackQuery, state: FSMContext, session: Session) -> None:
    data = update.data.split("_")
    question_id = int(data[1])
    selected_option = data[2]

    state_data = await state.get_data()
    questions = state_data["questions"]
    current_question_idx = state_data["current_question"]

    correct_answers = state_data.get("correct_answers", 0)

    question = next(q for q in questions if q["id"] == question_id)
    correct_answer = question["correct_answer"]

    if selected_option.upper() == correct_answer:
        correct = True
        correct_answers += 1
    else:
        correct = False

    await state.update_data(correct_answers=correct_answers)

    if correct:
        await update.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
    else:
        await update.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer}")

    next_question_idx = current_question_idx + 1
    if next_question_idx < len(questions):
        question = questions[next_question_idx]
        options = [
            ("A", question["option_a"]),
            ("B", question["option_b"]),
            ("C", question["option_c"]),
            ("D", question["option_d"])
        ]
        keyboard = InlineKeyboardBuilder()
        for option, text in options:
            keyboard.add(InlineKeyboardButton(text=text, callback_data=f"answer_{question['id']}_{option}"))
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start"))

        if "image" in question and question["image"]:
            await update.message.delete()
            await update.message.answer_photo(
                photo=question["image"],
                caption=question["text"],
                reply_markup=keyboard.adjust(1).as_markup()
            )
        else:
            await update.message.delete()
            await update.message.answer_photo(
                photo=photo,
                caption=question["text"],
                reply_markup=keyboard.adjust(1).as_markup()
            )
        await state.update_data(current_question=next_question_idx)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        correct_answers = state_data["correct_answers"]
        total_questions = len(questions)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await save_quiz_result(update.from_user.id, correct_answers, total_questions, session)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await update.message.edit_caption(
            caption=(
                f"<b>üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                f"<i>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</i> <b>{correct_answers}/{total_questions}</b> üèÜ\n\n"
                f"<b>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {correct_answers} üü¢\n"
                f"<b>‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b> {total_questions - correct_answers} üî¥\n\n"
                f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üôå</i>\n"
                f"<i>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞! üí™</i>"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=return_menu_functions_keyboard()
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()



